<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.39">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.6.0"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.6.0">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.0.15"/>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.80">
    <script>def reponame = &quot;kubernetes-project-helm-charts&quot;
def chartname = &quot;rabbitmq-chart&quot;
def git_config_email = &quot;samer.habash1984.devops@gmail.com&quot;
def chartVersion
def helmPackage

pipeline {
    agent {
        kubernetes {
        cloud &apos;kubernetes-cluster1&apos;
        label &apos;kubernetes-project-pod-label&apos;
        defaultContainer &apos;jnlp&apos;
        yaml &quot;&quot;&quot;
apiVersion: v1
kind: Pod
metadata:
labels:
  role: CI
spec:
  containers:
  - name: helm
    image: samer1984/helm-kubectl-alpine
    command:
    - cat
    tty: true
    volumeMounts:
    - name: kube-config
      mountPath: /root/.kube
  volumes:
  - name: kube-config
    hostPath:
      path: /home/sam/.kube/kubeconfig-to-let-jenkins-connect
&quot;&quot;&quot;
	}
  }
  stages {
    stage(&apos;Checkout SCM&apos;) {
      steps {
        container(&apos;helm&apos;) {
            // clone master and then checkout directory rabbutmq-chart from master branch
            sh &apos;git clone https://github.com/samer-habash/&apos; + reponame
            dir(reponame) {
                sh(&quot;&quot;&quot;
                    git checkout gh-pages
                    git checkout master ${chartname}
                &quot;&quot;&quot;)
            }
        }
      }
    }
    stage(&apos;Package chart and commit&apos;) {
      steps {
        container(&apos;helm&apos;) {
            //package the helm and index it
            dir(reponame) {
                // create helm package and save its name to the var helm_package
                script { 
                    helm_package = sh(script: &quot;helm package&quot; + &quot; &quot; + chartname + &quot; &quot; + &quot;--destination index/&quot;, returnStdout: true).split(&apos;/&apos;)[-1].trim()
                    chartVersion = helm_package.replaceAll(&quot;.tgz&quot;, &quot;&quot;)
                }
                // assign the helm package variable to the package name
                sh(&quot;&quot;&quot;
    				helm repo index index --url https://samer-habash.github.io/${reponame}/index/
    				rm -rf ${chartname}
                &quot;&quot;&quot;)
            }
        }
      }
    }
    stage(&apos;Commit and Push index gh-pages&apos;) {
      steps {
        container(&apos;helm&apos;) {
            withCredentials([usernamePassword(credentialsId: &apos;GitHub&apos;, usernameVariable: &apos;Username&apos;, passwordVariable: &apos;Password&apos;)]) {
                dir(reponame) {
                    sh(&quot;&quot;&quot;
                        git config --local credential.helper &quot;!f() { echo username=\\$Username; echo password=\\$Password; }; f&quot;
                        git config user.email ${git_config_email}
                        git add . &amp;&amp; git commit -am &quot;[Jenkins CI] added new helm package : ${helmPackage}&quot;
                        git push
                    &quot;&quot;&quot;)
                }
            }
        }
      }
    }
    stage(&apos;helm add repo and deploy&apos;) {
      steps {
        container(&apos;helm&apos;) {
            dir(reponame) {
                // helm install to fresh install, and helm upgrade to update the version of the currently installed chart
                sh(&quot;&quot;&quot;
                    helm repo add ${chartVersion} https://samer-habash.github.io/${reponame}/index/
                    helm repo update
                &quot;&quot;&quot;)
                script {
                    def helmList = sh(returnStdout: true, script: &quot;helm list --deployed&quot;)
                    // check if rabbitmq is deployed
                    if (!helmList.contains(chartname)) {
                        sh &quot;helm install ${chartname} ${chartVersion}/${chartname}&quot;
                        
                    }
                    // check if rabbitmq is deployed and NOT the latest version
                    else if(helmList.contains(chartname) &amp;&amp; !helmList.contains(chartVersion)) {
                        sh &quot;helm upgrade ${chartname} ${chartVersion}/${chartname}&quot;
                    }
                    // check if rabbitmq is deployed and the latest version
                    else {
                        
                        println(&quot;Chart &quot; + chartname + &quot; exists and latest verison : &quot; + chartVersion)
                    }
                }
            }
        }
      }
    }
  }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>
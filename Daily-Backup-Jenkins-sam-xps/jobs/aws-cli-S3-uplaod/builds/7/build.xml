<?xml version='1.1' encoding='UTF-8'?>
<flow-build plugin="workflow-job@2.39">
  <actions>
    <hudson.model.CauseAction>
      <causeBag class="linked-hash-map">
        <entry>
          <hudson.model.Cause_-UserIdCause>
            <userId>admin</userId>
          </hudson.model.Cause_-UserIdCause>
          <int>1</int>
        </entry>
      </causeBag>
    </hudson.model.CauseAction>
    <org.jenkinsci.plugins.workflow.libs.LibrariesAction plugin="workflow-cps-global-lib@2.16">
      <libraries/>
    </org.jenkinsci.plugins.workflow.libs.LibrariesAction>
  </actions>
  <queueId>11</queueId>
  <timestamp>1588152433501</timestamp>
  <startTime>1588152433504</startTime>
  <result>FAILURE</result>
  <duration>90678</duration>
  <charset>UTF-8</charset>
  <keepLog>false</keepLog>
  <execution class="org.jenkinsci.plugins.workflow.cps.CpsFlowExecution">
    <result>FAILURE</result>
    <script>podTemplate(cloud: &apos;kubernetes-cluster1&apos;, label: &apos;pod-label-cluster1&apos;,
    containers: [
		containerTemplate(
		  name: &apos;aws-cli-secret&apos;,
		  image: &apos;samer1984/aws-cli-alpine:v1&apos;,
		  ttyEnabled: true,
		  envVars: [
			envVar(key: &apos;AWS_DEFAULT_REGION&apos;, value: &apos;us-east-1&apos;),
			secretEnvVar(key: &apos;AWS_ACCESS_KEY_ID&apos;, secretName: &apos;aws-configure&apos;, secretKey: &apos;AWS_ACCESS_KEY_ID&apos;),
			secretEnvVar(key: &apos;AWS_SECRET_ACCESS_KEY&apos;, secretName: &apos;aws-configure&apos;, secretKey: &apos;AWS_SECRET_ACCESS_KEY&apos;)]
		)
	]
)
{
  node(&apos;pod-label-cluster1&apos;) {
    stage(&apos;isuuing aws commands&apos;) {
      container(&apos;aws-cli-secret&apos;) {
        def GitBranch = checkout(scm).GIT_BRANCH
        // S3 bucket cannot contain : spaces, underscores, uppercase letters
        def repoName = GitBranch.substring(0, GitBranch.lastIndexOf(&apos;/&apos;)).toLowerCase().replaceAll(&quot;\\s+&quot;, &quot;&quot;).replaceAll(&quot;_&quot;, &quot;&quot;)
        def repoBranch = GitBranch.tokenize(&apos;/&apos;)[1].toLowerCase().replaceAll(&quot;\\s+&quot;, &quot;&quot;).replaceAll(&quot;_&quot;, &quot;&quot;)
        sh label: &apos;Checking if S3 exists&apos;, script: &apos;&apos;&apos;
            #!/usr/bin/env bash
            #aws s3 ls
            #grep ${repoName}
            aws s3 ls | grep ${repoName} || true
            status=(&quot;${PIPESTATUS[@]}&quot;)
            AWSCODE=${status[0]}
            GREPCODE=${status[1]}
            echo $AWSCODE $GREPODE
            if [ $GREPCODE -eq 0 ]
            then
                # --delete : for deleting any files that are exist in source and not in S3
                aws s3 sync . s3://${repoName}-${repoBranch} --exclude &apos;.git/*&apos; --delete
                echo &quot;Finished creation of the repo to S3 Bucket Name : ${repoName}-${repoBranch}&quot;
            else
                aws s3 mb s3://${repoName}-${repoBranch}
                aws s3 cp . s3://${repoName}-${repoBranch} --recursive --exclude &apos;.git/*&apos;
                echo &quot;Finished upload the repo to S3 Bucket Name : ${repoName}-${repoBranch}&quot;
            fi
        &apos;&apos;&apos;
      }
    }
  }
}</script>
    <loadedScripts class="map"/>
    <durabilityHint>MAX_SURVIVABILITY</durabilityHint>
    <timings class="map">
      <entry>
        <string>flowNode</string>
        <long>37766771</long>
      </entry>
      <entry>
        <string>classLoad</string>
        <long>11982401</long>
      </entry>
      <entry>
        <string>run</string>
        <long>88558541</long>
      </entry>
      <entry>
        <string>parse</string>
        <long>33728297</long>
      </entry>
      <entry>
        <string>saveProgram</string>
        <long>9797988</long>
      </entry>
    </timings>
    <sandbox>true</sandbox>
    <iota>9</iota>
    <head>1:9</head>
    <done>true</done>
    <resumeBlocked>false</resumeBlocked>
  </execution>
  <completed>true</completed>
  <checkouts class="hudson.util.PersistedList"/>
</flow-build>